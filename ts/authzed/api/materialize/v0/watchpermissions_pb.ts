// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file authzed/api/materialize/v0/watchpermissions.proto (package authzed.api.materialize.v0, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ObjectReference, SubjectReference, ZedToken } from "../../v1/core_pb.js";

/**
 * @generated from message authzed.api.materialize.v0.WatchPermissionsRequest
 */
export class WatchPermissionsRequest extends Message<WatchPermissionsRequest> {
  /**
   * permissions is a list of permissions to watch for changes. At least one permission must be specified, and it must
   * be a subset or equal to the permissions that were enabled for the service.
   *
   * @generated from field: repeated authzed.api.materialize.v0.WatchedPermission permissions = 1;
   */
  permissions: WatchedPermission[] = [];

  /**
   * optional_starting_after is the revision token to start watching from. If not provided, the stream
   * will start from the current revision at the moment of the request.
   *
   * @generated from field: authzed.api.v1.ZedToken optional_starting_after = 2;
   */
  optionalStartingAfter?: ZedToken;

  constructor(data?: PartialMessage<WatchPermissionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "authzed.api.materialize.v0.WatchPermissionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "permissions", kind: "message", T: WatchedPermission, repeated: true },
    { no: 2, name: "optional_starting_after", kind: "message", T: ZedToken },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchPermissionsRequest {
    return new WatchPermissionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchPermissionsRequest {
    return new WatchPermissionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchPermissionsRequest {
    return new WatchPermissionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WatchPermissionsRequest | PlainMessage<WatchPermissionsRequest> | undefined, b: WatchPermissionsRequest | PlainMessage<WatchPermissionsRequest> | undefined): boolean {
    return proto3.util.equals(WatchPermissionsRequest, a, b);
  }
}

/**
 * @generated from message authzed.api.materialize.v0.WatchedPermission
 */
export class WatchedPermission extends Message<WatchedPermission> {
  /**
   * resource_type is the type of the resource to watch for changes.
   *
   * @generated from field: string resource_type = 1;
   */
  resourceType = "";

  /**
   * permission is the permission to watch for changes.
   *
   * @generated from field: string permission = 2;
   */
  permission = "";

  /**
   * subject_type is the type of the subject to watch for changes.
   *
   * @generated from field: string subject_type = 3;
   */
  subjectType = "";

  /**
   * optional_subject_relation is the relation on the subject to watch for changes.
   *
   * @generated from field: string optional_subject_relation = 4;
   */
  optionalSubjectRelation = "";

  constructor(data?: PartialMessage<WatchedPermission>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "authzed.api.materialize.v0.WatchedPermission";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "permission", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "subject_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "optional_subject_relation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchedPermission {
    return new WatchedPermission().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchedPermission {
    return new WatchedPermission().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchedPermission {
    return new WatchedPermission().fromJsonString(jsonString, options);
  }

  static equals(a: WatchedPermission | PlainMessage<WatchedPermission> | undefined, b: WatchedPermission | PlainMessage<WatchedPermission> | undefined): boolean {
    return proto3.util.equals(WatchedPermission, a, b);
  }
}

/**
 * @generated from message authzed.api.materialize.v0.WatchPermissionsResponse
 */
export class WatchPermissionsResponse extends Message<WatchPermissionsResponse> {
  /**
   * @generated from oneof authzed.api.materialize.v0.WatchPermissionsResponse.response
   */
  response: {
    /**
     * change is the computed permission delta that has occurred as result of a mutation in origin SpiceDB.
     * The consumer should apply this change to the current state of the computed permissions in their target system.
     * Once an event arrives with completed_revision instead, the consumer shall consider there are not more changes
     * originating from that revision.
     *
     * The consumer should keep track of the revision in order to resume streaming in the event of consumer restarts.
     *
     * @generated from field: authzed.api.materialize.v0.PermissionChange change = 1;
     */
    value: PermissionChange;
    case: "change";
  } | {
    /**
     * completed_revision is the revision token that indicates all changes originating from a revision have been
     * streamed and thus the revision should be considered completed. It may also be
     * received without accompanying set of changes, indicating that a mutation in the origin SpiceDB cluster did
     * not yield any effective changes in the computed permissions
     *
     * @generated from field: authzed.api.v1.ZedToken completed_revision = 2;
     */
    value: ZedToken;
    case: "completedRevision";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<WatchPermissionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "authzed.api.materialize.v0.WatchPermissionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "change", kind: "message", T: PermissionChange, oneof: "response" },
    { no: 2, name: "completed_revision", kind: "message", T: ZedToken, oneof: "response" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchPermissionsResponse {
    return new WatchPermissionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchPermissionsResponse {
    return new WatchPermissionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchPermissionsResponse {
    return new WatchPermissionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WatchPermissionsResponse | PlainMessage<WatchPermissionsResponse> | undefined, b: WatchPermissionsResponse | PlainMessage<WatchPermissionsResponse> | undefined): boolean {
    return proto3.util.equals(WatchPermissionsResponse, a, b);
  }
}

/**
 * @generated from message authzed.api.materialize.v0.PermissionChange
 */
export class PermissionChange extends Message<PermissionChange> {
  /**
   * revision represents the revision at which the change occurred.
   *
   * @generated from field: authzed.api.v1.ZedToken revision = 1;
   */
  revision?: ZedToken;

  /**
   * resource is the resource that the permission change is related to.
   *
   * @generated from field: authzed.api.v1.ObjectReference resource = 2;
   */
  resource?: ObjectReference;

  /**
   * permission is the permission that has changed.
   *
   * @generated from field: string permission = 3;
   */
  permission = "";

  /**
   * subject is the subject that the permission change is related to.
   *
   * @generated from field: authzed.api.v1.SubjectReference subject = 4;
   */
  subject?: SubjectReference;

  /**
   * permissionship is the new permissionship of the subject over the resource after the change.
   *
   * @generated from field: authzed.api.materialize.v0.PermissionChange.Permissionship permissionship = 5;
   */
  permissionship = PermissionChange_Permissionship.UNSPECIFIED;

  constructor(data?: PartialMessage<PermissionChange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "authzed.api.materialize.v0.PermissionChange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "revision", kind: "message", T: ZedToken },
    { no: 2, name: "resource", kind: "message", T: ObjectReference },
    { no: 3, name: "permission", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "subject", kind: "message", T: SubjectReference },
    { no: 5, name: "permissionship", kind: "enum", T: proto3.getEnumType(PermissionChange_Permissionship) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PermissionChange {
    return new PermissionChange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PermissionChange {
    return new PermissionChange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PermissionChange {
    return new PermissionChange().fromJsonString(jsonString, options);
  }

  static equals(a: PermissionChange | PlainMessage<PermissionChange> | undefined, b: PermissionChange | PlainMessage<PermissionChange> | undefined): boolean {
    return proto3.util.equals(PermissionChange, a, b);
  }
}

/**
 * @generated from enum authzed.api.materialize.v0.PermissionChange.Permissionship
 */
export enum PermissionChange_Permissionship {
  /**
   * @generated from enum value: PERMISSIONSHIP_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PERMISSIONSHIP_NO_PERMISSION = 1;
   */
  NO_PERMISSION = 1,

  /**
   * @generated from enum value: PERMISSIONSHIP_HAS_PERMISSION = 2;
   */
  HAS_PERMISSION = 2,

  /**
   * @generated from enum value: PERMISSIONSHIP_CONDITIONAL_PERMISSION = 3;
   */
  CONDITIONAL_PERMISSION = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(PermissionChange_Permissionship)
proto3.util.setEnumType(PermissionChange_Permissionship, "authzed.api.materialize.v0.PermissionChange.Permissionship", [
  { no: 0, name: "PERMISSIONSHIP_UNSPECIFIED" },
  { no: 1, name: "PERMISSIONSHIP_NO_PERMISSION" },
  { no: 2, name: "PERMISSIONSHIP_HAS_PERMISSION" },
  { no: 3, name: "PERMISSIONSHIP_CONDITIONAL_PERMISSION" },
]);

