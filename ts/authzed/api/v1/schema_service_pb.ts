// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file authzed/api/v1/schema_service.proto (package authzed.api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ZedToken } from "./core_pb.js";

/**
 * ReadSchemaRequest returns the schema from the database.
 *
 * @generated from message authzed.api.v1.ReadSchemaRequest
 */
export class ReadSchemaRequest extends Message<ReadSchemaRequest> {
  constructor(data?: PartialMessage<ReadSchemaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "authzed.api.v1.ReadSchemaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadSchemaRequest {
    return new ReadSchemaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadSchemaRequest {
    return new ReadSchemaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadSchemaRequest {
    return new ReadSchemaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReadSchemaRequest | PlainMessage<ReadSchemaRequest> | undefined, b: ReadSchemaRequest | PlainMessage<ReadSchemaRequest> | undefined): boolean {
    return proto3.util.equals(ReadSchemaRequest, a, b);
  }
}

/**
 * ReadSchemaResponse is the resulting data after having read the Object
 * Definitions from a Schema.
 *
 * @generated from message authzed.api.v1.ReadSchemaResponse
 */
export class ReadSchemaResponse extends Message<ReadSchemaResponse> {
  /**
   * schema_text is the textual form of the current schema in the system
   *
   * @generated from field: string schema_text = 1;
   */
  schemaText = "";

  /**
   * read_at is the ZedToken at which the schema was read.
   *
   * @generated from field: authzed.api.v1.ZedToken read_at = 2;
   */
  readAt?: ZedToken;

  constructor(data?: PartialMessage<ReadSchemaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "authzed.api.v1.ReadSchemaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schema_text", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "read_at", kind: "message", T: ZedToken },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadSchemaResponse {
    return new ReadSchemaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadSchemaResponse {
    return new ReadSchemaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadSchemaResponse {
    return new ReadSchemaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReadSchemaResponse | PlainMessage<ReadSchemaResponse> | undefined, b: ReadSchemaResponse | PlainMessage<ReadSchemaResponse> | undefined): boolean {
    return proto3.util.equals(ReadSchemaResponse, a, b);
  }
}

/**
 * WriteSchemaRequest is the required data used to "upsert" the Schema of a
 * Permissions System.
 *
 * @generated from message authzed.api.v1.WriteSchemaRequest
 */
export class WriteSchemaRequest extends Message<WriteSchemaRequest> {
  /**
   * The Schema containing one or more Object Definitions that will be written
   * to the Permissions System.
   *
   * 4MiB
   *
   * @generated from field: string schema = 1;
   */
  schema = "";

  constructor(data?: PartialMessage<WriteSchemaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "authzed.api.v1.WriteSchemaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WriteSchemaRequest {
    return new WriteSchemaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WriteSchemaRequest {
    return new WriteSchemaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WriteSchemaRequest {
    return new WriteSchemaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WriteSchemaRequest | PlainMessage<WriteSchemaRequest> | undefined, b: WriteSchemaRequest | PlainMessage<WriteSchemaRequest> | undefined): boolean {
    return proto3.util.equals(WriteSchemaRequest, a, b);
  }
}

/**
 * WriteSchemaResponse is the resulting data after having written a Schema to
 * a Permissions System.
 *
 * @generated from message authzed.api.v1.WriteSchemaResponse
 */
export class WriteSchemaResponse extends Message<WriteSchemaResponse> {
  /**
   * written_at is the ZedToken at which the schema was written.
   *
   * @generated from field: authzed.api.v1.ZedToken written_at = 1;
   */
  writtenAt?: ZedToken;

  constructor(data?: PartialMessage<WriteSchemaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "authzed.api.v1.WriteSchemaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "written_at", kind: "message", T: ZedToken },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WriteSchemaResponse {
    return new WriteSchemaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WriteSchemaResponse {
    return new WriteSchemaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WriteSchemaResponse {
    return new WriteSchemaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WriteSchemaResponse | PlainMessage<WriteSchemaResponse> | undefined, b: WriteSchemaResponse | PlainMessage<WriteSchemaResponse> | undefined): boolean {
    return proto3.util.equals(WriteSchemaResponse, a, b);
  }
}

