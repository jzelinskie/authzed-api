// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file authzed/api/v1alpha1/watchresources_service.proto (package authzed.api.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ObjectReference, SubjectReference, ZedToken } from "../v1/core_pb.js";

/**
 * WatchResourcesRequest starts a watch for specific permission updates
 * for the given resource and subject types.
 *
 * @generated from message authzed.api.v1alpha1.WatchResourcesRequest
 */
export class WatchResourcesRequest extends Message<WatchResourcesRequest> {
  /**
   * resource_object_type is the type of resource object for which we will
   * watch for changes.
   *
   * @generated from field: string resource_object_type = 1;
   */
  resourceObjectType = "";

  /**
   * permission is the name of the permission or relation for which we will
   * watch for changes.
   *
   * @generated from field: string permission = 2;
   */
  permission = "";

  /**
   * subject_object_type is the type of the subject resource for which we will
   * watch for changes.
   *
   * @generated from field: string subject_object_type = 3;
   */
  subjectObjectType = "";

  /**
   * optional_subject_relation allows you to specify a group of subjects to watch
   * for a given subject type.
   *
   * @generated from field: string optional_subject_relation = 4;
   */
  optionalSubjectRelation = "";

  /**
   * @generated from field: authzed.api.v1.ZedToken optional_start_cursor = 5;
   */
  optionalStartCursor?: ZedToken;

  constructor(data?: PartialMessage<WatchResourcesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "authzed.api.v1alpha1.WatchResourcesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource_object_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "permission", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "subject_object_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "optional_subject_relation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "optional_start_cursor", kind: "message", T: ZedToken },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchResourcesRequest {
    return new WatchResourcesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchResourcesRequest {
    return new WatchResourcesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchResourcesRequest {
    return new WatchResourcesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WatchResourcesRequest | PlainMessage<WatchResourcesRequest> | undefined, b: WatchResourcesRequest | PlainMessage<WatchResourcesRequest> | undefined): boolean {
    return proto3.util.equals(WatchResourcesRequest, a, b);
  }
}

/**
 * PermissionUpdate represents a single permission update for a specific
 * subject's permissions.
 *
 * @generated from message authzed.api.v1alpha1.PermissionUpdate
 */
export class PermissionUpdate extends Message<PermissionUpdate> {
  /**
   * subject defines the subject resource whose permissions have changed.
   *
   * @generated from field: authzed.api.v1.SubjectReference subject = 1;
   */
  subject?: SubjectReference;

  /**
   * resource defines the specific object in the system.
   *
   * @generated from field: authzed.api.v1.ObjectReference resource = 2;
   */
  resource?: ObjectReference;

  /**
   * @generated from field: string relation = 3;
   */
  relation = "";

  /**
   * @generated from field: authzed.api.v1alpha1.PermissionUpdate.Permissionship updated_permission = 4;
   */
  updatedPermission = PermissionUpdate_Permissionship.UNSPECIFIED;

  constructor(data?: PartialMessage<PermissionUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "authzed.api.v1alpha1.PermissionUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subject", kind: "message", T: SubjectReference },
    { no: 2, name: "resource", kind: "message", T: ObjectReference },
    { no: 3, name: "relation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "updated_permission", kind: "enum", T: proto3.getEnumType(PermissionUpdate_Permissionship) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PermissionUpdate {
    return new PermissionUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PermissionUpdate {
    return new PermissionUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PermissionUpdate {
    return new PermissionUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: PermissionUpdate | PlainMessage<PermissionUpdate> | undefined, b: PermissionUpdate | PlainMessage<PermissionUpdate> | undefined): boolean {
    return proto3.util.equals(PermissionUpdate, a, b);
  }
}

/**
 * todo: work this into the v1 core API at some point since it's used
 * across services.
 *
 * @generated from enum authzed.api.v1alpha1.PermissionUpdate.Permissionship
 */
export enum PermissionUpdate_Permissionship {
  /**
   * @generated from enum value: PERMISSIONSHIP_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PERMISSIONSHIP_NO_PERMISSION = 1;
   */
  NO_PERMISSION = 1,

  /**
   * @generated from enum value: PERMISSIONSHIP_HAS_PERMISSION = 2;
   */
  HAS_PERMISSION = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(PermissionUpdate_Permissionship)
proto3.util.setEnumType(PermissionUpdate_Permissionship, "authzed.api.v1alpha1.PermissionUpdate.Permissionship", [
  { no: 0, name: "PERMISSIONSHIP_UNSPECIFIED" },
  { no: 1, name: "PERMISSIONSHIP_NO_PERMISSION" },
  { no: 2, name: "PERMISSIONSHIP_HAS_PERMISSION" },
]);

/**
 * WatchResourcesResponse enumerates the list of permission updates that have
 * occurred as a result of one or more relationship updates.
 *
 * @generated from message authzed.api.v1alpha1.WatchResourcesResponse
 */
export class WatchResourcesResponse extends Message<WatchResourcesResponse> {
  /**
   * @generated from field: repeated authzed.api.v1alpha1.PermissionUpdate updates = 1;
   */
  updates: PermissionUpdate[] = [];

  /**
   * @generated from field: authzed.api.v1.ZedToken changes_through = 2;
   */
  changesThrough?: ZedToken;

  constructor(data?: PartialMessage<WatchResourcesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "authzed.api.v1alpha1.WatchResourcesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "updates", kind: "message", T: PermissionUpdate, repeated: true },
    { no: 2, name: "changes_through", kind: "message", T: ZedToken },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchResourcesResponse {
    return new WatchResourcesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchResourcesResponse {
    return new WatchResourcesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchResourcesResponse {
    return new WatchResourcesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WatchResourcesResponse | PlainMessage<WatchResourcesResponse> | undefined, b: WatchResourcesResponse | PlainMessage<WatchResourcesResponse> | undefined): boolean {
    return proto3.util.equals(WatchResourcesResponse, a, b);
  }
}

