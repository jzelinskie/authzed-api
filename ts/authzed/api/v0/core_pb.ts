// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file authzed/api/v0/core.proto (package authzed.api.v0, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message authzed.api.v0.RelationTuple
 */
export class RelationTuple extends Message<RelationTuple> {
  /**
   * Each tupleset specifies keys of a set of relation tuples. The set can
   * include a single tuple key, or all tuples with a given object ID or
   * userset in a namespace, optionally constrained by a relation name.
   *
   * examples:
   * doc:readme#viewer@group:eng#member (fully specified)
   * doc:*#*#group:eng#member (all tuples that this userset relates to)
   * doc:12345#*#* (all tuples with a direct relationship to a document)
   * doc:12345#writer#* (all tuples with direct write relationship with the
   * document) doc:#writer#group:eng#member (all tuples that eng group has write
   * relationship)
   *
   * @generated from field: authzed.api.v0.ObjectAndRelation object_and_relation = 1;
   */
  objectAndRelation?: ObjectAndRelation;

  /**
   * @generated from field: authzed.api.v0.User user = 2;
   */
  user?: User;

  constructor(data?: PartialMessage<RelationTuple>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "authzed.api.v0.RelationTuple";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "object_and_relation", kind: "message", T: ObjectAndRelation },
    { no: 2, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RelationTuple {
    return new RelationTuple().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RelationTuple {
    return new RelationTuple().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RelationTuple {
    return new RelationTuple().fromJsonString(jsonString, options);
  }

  static equals(a: RelationTuple | PlainMessage<RelationTuple> | undefined, b: RelationTuple | PlainMessage<RelationTuple> | undefined): boolean {
    return proto3.util.equals(RelationTuple, a, b);
  }
}

/**
 * @generated from message authzed.api.v0.ObjectAndRelation
 */
export class ObjectAndRelation extends Message<ObjectAndRelation> {
  /**
   * @generated from field: string namespace = 1;
   */
  namespace = "";

  /**
   * @generated from field: string object_id = 2;
   */
  objectId = "";

  /**
   * @generated from field: string relation = 3;
   */
  relation = "";

  constructor(data?: PartialMessage<ObjectAndRelation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "authzed.api.v0.ObjectAndRelation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "object_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "relation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ObjectAndRelation {
    return new ObjectAndRelation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ObjectAndRelation {
    return new ObjectAndRelation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ObjectAndRelation {
    return new ObjectAndRelation().fromJsonString(jsonString, options);
  }

  static equals(a: ObjectAndRelation | PlainMessage<ObjectAndRelation> | undefined, b: ObjectAndRelation | PlainMessage<ObjectAndRelation> | undefined): boolean {
    return proto3.util.equals(ObjectAndRelation, a, b);
  }
}

/**
 * @generated from message authzed.api.v0.RelationReference
 */
export class RelationReference extends Message<RelationReference> {
  /**
   * @generated from field: string namespace = 1;
   */
  namespace = "";

  /**
   * @generated from field: string relation = 3;
   */
  relation = "";

  constructor(data?: PartialMessage<RelationReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "authzed.api.v0.RelationReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "relation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RelationReference {
    return new RelationReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RelationReference {
    return new RelationReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RelationReference {
    return new RelationReference().fromJsonString(jsonString, options);
  }

  static equals(a: RelationReference | PlainMessage<RelationReference> | undefined, b: RelationReference | PlainMessage<RelationReference> | undefined): boolean {
    return proto3.util.equals(RelationReference, a, b);
  }
}

/**
 * @generated from message authzed.api.v0.User
 */
export class User extends Message<User> {
  /**
   * @generated from oneof authzed.api.v0.User.user_oneof
   */
  userOneof: {
    /**
     * @generated from field: authzed.api.v0.ObjectAndRelation userset = 2;
     */
    value: ObjectAndRelation;
    case: "userset";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "authzed.api.v0.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "userset", kind: "message", T: ObjectAndRelation, oneof: "user_oneof" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

